{"version":3,"sources":["components/Cylinder/index.js","App.js","serviceWorker.js","index.js"],"names":["Cylinder","num","this","props","bulletArr","ownBullet","array","take","emptyBullet","drop","console","log","id","className","map","item","index","Component","web3","Web3","window","currentProvider","contract","eth","Contract","JSON","parse","ABI","address","MyButton","styled","Button","background","border","borderRadius","boxShadow","color","height","width","padding","App","state","owner","players","balance","amount","message","loading","isOwner","onInputChange","bind","onParticipate","participate","onPickWinner","pickWinner","Promise","all","methods","call","getPlayers","getBalance","options","getAccounts","accounts","account","setState","e","target","value","send","from","utils","toWei","setTimeout","location","reload","error","toString","fromWei","length","type","onChange","onClick","disabled","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.82bec0c4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport array from 'lodash/array'\r\nimport \"./style.css\";\r\n\r\nclass Cylinder extends Component {\r\n  render() {\r\n    const { num } = this.props;\r\n    let bulletArr = ['chamber one', 'chamber two', 'chamber three','chamber four', 'chamber five', 'chamber six'];\r\n    let ownBullet = array.take(bulletArr, num);  \r\n    let emptyBullet =  array.drop(bulletArr, num); \r\n    console.log(ownBullet, emptyBullet)\r\n    \r\n    return (\r\n     \r\n      <div id=\"cylinder\">\r\n        <div className=\"sculpt one\"></div>\r\n        <div className=\"sculpt two\"></div> \r\n        <div className=\"sculpt three\"></div> \r\n        <div className=\"sculpt four\"></div>\r\n        <div className=\"sculpt five\"></div>\r\n        <div className=\"sculpt six\"></div>\r\n\r\n        <div className=\"ring center\"></div>\r\n\r\n        {ownBullet.map((item, index) => {\r\n            return (\r\n                <div className={item}>\r\n                    <div className=\"bullet\">\r\n                        <div className=\"ring\"></div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })}\r\n\r\n        \r\n        {emptyBullet.map((item, index) => {\r\n            return (\r\n                <div className={item}>\r\n                </div>\r\n            )\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cylinder;\r\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { styled } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport './App.css';\nimport address from './address.json';\nimport { interface as ABI } from './Lottery.json';\n\nimport Cylinder from \"./components/Cylinder\";\n\nconst web3 = new Web3(window.web3.currentProvider);\nconst contract = new web3.eth.Contract(JSON.parse(ABI), address);\n\nconst MyButton = styled(Button)({\n  background: 'linear-gradient(45deg, #a0deff 30%, #546fff 90%)',\n  border: 0,\n  borderRadius: 3,\n  boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  color: 'white',\n  height: 30,\n  width: '100%',\n  padding: '0 30px',\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      owner: '',\n      players: [],\n      balance: '0',\n      amount: '0',\n      message: '',\n      loading: false,\n      isOwner: false\n    };\n\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onParticipate = this.participate.bind(this);\n    this.onPickWinner = this.pickWinner.bind(this);\n  }\n\n  async componentDidMount() {\n    const [owner, players, balance] = await Promise.all([\n      contract.methods.owner().call(), //合約擁有者\n      contract.methods.getPlayers().call(),\n      web3.eth.getBalance(contract.options.address),\n    ]);\n\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    const isOwner = owner === account ? true : false;\n    console.log({ owner, players, balance, account, isOwner });\n    \n    this.setState({ owner, players, balance, isOwner });\n  }\n\n  onInputChange(e) {\n    this.setState({ amount: e.target.value });\n  }\n\n  async participate() {\n    try {\n      this.setState({ message: '参与抽奖中，请稍后...', loading: true });\n\n      const accounts = await web3.eth.getAccounts();\n      await contract.methods.participate().send({\n        from: accounts[0],\n        value: web3.utils.toWei(this.state.amount, 'ether'),\n      });\n\n      this.setState({ message: '参与成功！', loading: false });\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    } catch (err) {\n      console.error(err);\n      this.setState({ message: err.message || err.toString(), loading: false });\n    }\n  }\n\n  async pickWinner() {\n    try {\n      this.setState({ message: '开奖中，请稍后...', loading: true });\n\n      const accounts = await web3.eth.getAccounts();\n      await contract.methods.pickWinner().send({\n        from: accounts[0],\n      });\n\n      this.setState({ message: '开奖完毕！', loading: false });\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    } catch (err) {\n      console.error(err);\n      this.setState({ message: err.message || err.toString(), loading: false });\n    }\n  }\n\n  render() {\n    const { balance, players, amount, loading, message, owner, isOwner } = this.state;\n    \n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2 className=\"App-title\">基于智能合约的抽奖</h2>\n        </div>\n        <div className=\"App-body\">\n          <MyButton>奖金池金额 ETH {web3.utils.fromWei(balance, 'ether')}</MyButton>\n          <div className=\"money\">合约地址：<span id=\"cash\">{address}</span></div>\n          <Cylinder num={players.length}/>\n          <p>\n              共 {players.length} 人参与抽奖\n          </p>\n\n          <hr />\n\n          <h3>想试试手气?</h3>\n          <div>\n            <label>\n              输入随机金额\n              <input type=\"number\" value={amount} onChange={this.onInputChange} />\n            </label>\n            <button onClick={this.onParticipate} disabled={loading}>\n              参与抽奖\n            </button>\n          </div>\n\n          <hr />\n\n          <h3>开奖时间到?</h3>\n          <button onClick={this.onPickWinner} disabled={!isOwner}>\n            立即开奖\n          </button>\n\n          <hr />\n          <p>合约管理员：{owner}</p>\n         \n\n          <h3 className=\"message\">{message}</h3>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}